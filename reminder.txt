// Generate a Controller
$ nest generate controller
// shorthand: $ nest g co


// to see the path use --dry-run
nest generate controller modules/abc --dry-run

// Generate a Service with the Nest CLI
nest generate service {name}
// shorthand: nest g s {name}

// Generate a Nest Module with the Nest CLI
nest g module {name}
// shorthand: nest g mo {name}

/**
 * Generate a DTO class with the Nest CLI 
 * --no-spec (no test file needed for DTO's)
 */
nest g class coffees/dto/create-coffee.dto --no-spec


/* Generate Entity Class */
nest g class coffees/entities/flavor.entity --no-spec


// Creating a TypeOrm Migration
npx typeorm migration:create src/migrations/CoffeeRefactor
// CoffeeRefactor being the NAME we are giving "this" migration


/* RUNNING MIGRATIONS */

/**
 * ðŸ’¡ Remember ðŸ’¡
 * You must BUILD your Nest project (so that everything is output to the `/dist/` folder,
 * before a Migration can run, it needs compilated files.
 */
 
// Compile project first 
npm run build

// Run migration(s) 
npx typeorm migration:run -d dist/typeorm-cli.config

// REVERT migration(s)
npx typeorm migration:revert -d dist/typeorm-cli.config

// Let TypeOrm generate migrations (for you)
npx typeorm migration:generate src/migrations/SchemaSync -d dist/typeorm-cli.config

// Nest CLI - Generate a new CoffeeRatingModule
nest g mo coffee-rating

// Nest CLI - Generate a new CoffeeRatingService 
nest g s coffee-rating


